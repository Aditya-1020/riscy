$date
	Tue Oct 28 15:17:44 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module top_tb $end
$var wire 32 ! stall_count [31:0] $end
$var wire 32 " pc_if [31:0] $end
$var wire 32 # pc_id [31:0] $end
$var wire 32 $ instruction_if [31:0] $end
$var wire 32 % instruction_id [31:0] $end
$var wire 32 & instruction_count [31:0] $end
$var wire 1 ' icache_stall $end
$var wire 32 ( cycle_count [31:0] $end
$var wire 32 ) branch_mispredicts [31:0] $end
$var wire 1 * branch_mispredict $end
$var wire 32 + branch_count [31:0] $end
$var reg 1 , clk $end
$var reg 1 - reset $end
$scope module dut $end
$var wire 1 , clk $end
$var wire 32 . instruction_id [31:0] $end
$var wire 1 - reset $end
$var wire 32 / stall_count [31:0] $end
$var wire 32 0 pc_if_debug [31:0] $end
$var wire 32 1 pc_id_debug [31:0] $end
$var wire 1 2 is_store $end
$var wire 1 3 is_load $end
$var wire 1 4 is_jump $end
$var wire 1 5 is_jalr $end
$var wire 1 6 is_jal $end
$var wire 1 7 is_branch $end
$var wire 32 8 instruction_if_debug [31:0] $end
$var wire 32 9 instruction_id_debug [31:0] $end
$var wire 32 : instruction_count [31:0] $end
$var wire 1 ' icache_stall_signal $end
$var wire 32 ; cycle_count [31:0] $end
$var wire 32 < branch_mispredicts [31:0] $end
$var wire 1 * branch_mispredict_signal $end
$var wire 32 = branch_count [31:0] $end
$var wire 1 > branch $end
$var wire 1 ? RegWrite $end
$var wire 1 @ MemWrite $end
$var wire 1 A MemToReg $end
$var wire 1 B MemRead $end
$var wire 4 C ALU_op [3:0] $end
$var wire 1 D ALUSrc $end
$scope module control_unit_inst $end
$var wire 32 E instruction [31:0] $end
$var wire 7 F opcode [6:0] $end
$var wire 7 G funct7 [6:0] $end
$var wire 3 H funct3 [2:0] $end
$var wire 4 I decoded_funct7 [3:0] $end
$var reg 1 D ALUSrc $end
$var reg 4 J ALU_op [3:0] $end
$var reg 1 B MemRead $end
$var reg 1 A MemToReg $end
$var reg 1 @ MemWrite $end
$var reg 1 ? RegWrite $end
$var reg 1 > branch $end
$var reg 1 7 is_branch $end
$var reg 1 6 is_jal $end
$var reg 1 5 is_jalr $end
$var reg 1 4 is_jump $end
$var reg 1 3 is_load $end
$var reg 1 2 is_store $end
$scope module decode_inst $end
$var wire 7 K funct7 [6:0] $end
$var reg 4 L alu_op [3:0] $end
$upscope $end
$upscope $end
$scope module dp $end
$var wire 1 D ALUSrc_id $end
$var wire 4 M ALU_op_id [3:0] $end
$var wire 1 B MemRead_id $end
$var wire 1 A MemToReg_id $end
$var wire 1 @ MemWrite_id $end
$var wire 1 ? RegWrite_id $end
$var wire 32 N alu_in_a [31:0] $end
$var wire 1 > branch_id $end
$var wire 1 * branch_mispredict $end
$var wire 1 , clk $end
$var wire 1 O control_hazard $end
$var wire 1 P flush_ex $end
$var wire 1 Q flush_id $end
$var wire 1 R flush_if $end
$var wire 1 ' icache_stall $end
$var wire 32 S instruction_id_debug [31:0] $end
$var wire 32 T instruction_if_debug [31:0] $end
$var wire 1 7 is_branch_id $end
$var wire 1 6 is_jal_id $end
$var wire 1 5 is_jalr_id $end
$var wire 1 4 is_jump_id $end
$var wire 1 U mem_ack_to_cache $end
$var wire 32 V mem_data_to_cache [31:0] $end
$var wire 32 W pc_id_debug [31:0] $end
$var wire 32 X pc_if_debug [31:0] $end
$var wire 1 - reset $end
$var wire 1 Y stall $end
$var wire 1 Z use_ras_prediction $end
$var wire 4 [ write_enable_mem [3:0] $end
$var wire 32 \ write_back_data [31:0] $end
$var wire 5 ] rs2_id [4:0] $end
$var wire 32 ^ rs2_data_mem [31:0] $end
$var wire 32 _ rs2_data_id [31:0] $end
$var wire 32 ` rs2_data_ex [31:0] $end
$var wire 5 a rs2_addr_ex [4:0] $end
$var wire 5 b rs1_id [4:0] $end
$var wire 32 c rs1_data_id [31:0] $end
$var wire 32 d rs1_data_ex [31:0] $end
$var wire 5 e rs1_addr_ex [4:0] $end
$var wire 5 f rd_wb [4:0] $end
$var wire 5 g rd_mem [4:0] $end
$var wire 5 h rd_id [4:0] $end
$var wire 5 i rd_ex [4:0] $end
$var wire 1 j ras_valid $end
$var wire 32 k ras_top_addr [31:0] $end
$var wire 3 l ras_ptr [2:0] $end
$var wire 1 m prediction_if $end
$var wire 1 n prediction_id $end
$var wire 1 o prediction_ex $end
$var wire 32 p predicted_target_id [31:0] $end
$var wire 32 q predicted_target_ex [31:0] $end
$var wire 32 r predicted_pc_if [31:0] $end
$var wire 2 s predict_strength_if [1:0] $end
$var wire 32 t pc_plus4_if [31:0] $end
$var wire 32 u pc_next_if [31:0] $end
$var wire 32 v pc_if [31:0] $end
$var wire 32 w pc_id [31:0] $end
$var wire 32 x pc_hit_btb [31:0] $end
$var wire 32 y pc_ex [31:0] $end
$var wire 7 z opcode_id [6:0] $end
$var wire 7 { opcode_ex [6:0] $end
$var wire 32 | mem_read_data [31:0] $end
$var wire 32 } mem_data_wb [31:0] $end
$var wire 1 ~ load_use_stall $end
$var wire 2 !" load_type_mem [1:0] $end
$var wire 1 "" is_jalr_ex $end
$var wire 1 #" is_jal_ex $end
$var wire 1 $" is_branch_ex $end
$var wire 32 %" instruction_if [31:0] $end
$var wire 32 &" instruction_id [31:0] $end
$var wire 1 '" instr_30_id $end
$var wire 1 (" instr_30_ex $end
$var wire 32 )" immediate_id [31:0] $end
$var wire 32 *" immediate_ex [31:0] $end
$var wire 1 +" icache_ready $end
$var wire 1 ," icache_miss $end
$var wire 1 -" icache_mem_req $end
$var wire 32 ." icache_mem_addr [31:0] $end
$var wire 1 /" icache_hit $end
$var wire 3 0" funct3_mem [2:0] $end
$var wire 3 1" funct3_id [2:0] $end
$var wire 3 2" funct3_ex [2:0] $end
$var wire 32 3" forwarded_rs2_ex [31:0] $end
$var wire 32 4" forwarded_rs1_ex [31:0] $end
$var wire 2 5" forward_b [1:0] $end
$var wire 2 6" forward_a [1:0] $end
$var wire 32 7" btb_target_if [31:0] $end
$var wire 1 8" btb_hit $end
$var wire 32 9" branch_target_ex [31:0] $end
$var wire 1 :" branch_taken_ex $end
$var wire 1 ;" branch_ex $end
$var wire 1 <" alu_zero_ex $end
$var wire 32 =" alu_result_wb [31:0] $end
$var wire 32 >" alu_result_mem [31:0] $end
$var wire 32 ?" alu_result_ex [31:0] $end
$var wire 32 @" alu_in_b [31:0] $end
$var wire 32 A" actual_next_pc_ex [31:0] $end
$var wire 1 B" RegWrite_wb $end
$var wire 1 C" RegWrite_mem $end
$var wire 1 D" RegWrite_ex $end
$var wire 1 E" MemWrite_mem $end
$var wire 1 F" MemWrite_ex $end
$var wire 1 G" MemToReg_wb $end
$var wire 1 H" MemToReg_mem $end
$var wire 1 I" MemToReg_ex $end
$var wire 1 J" MemRead_mem $end
$var wire 1 K" MemRead_ex $end
$var wire 4 L" ALU_op_ex [3:0] $end
$var wire 1 M" ALUSrc_ex $end
$scope module alu_inst $end
$var wire 32 N" a [31:0] $end
$var wire 32 O" b [31:0] $end
$var wire 32 P" signed_a [31:0] $end
$var wire 32 Q" signed_b [31:0] $end
$var wire 5 R" shift_amount [4:0] $end
$var wire 4 S" ALUControl [3:0] $end
$var reg 32 T" result [31:0] $end
$var reg 1 <" zero $end
$upscope $end
$scope module bp_inst $end
$var wire 1 , clk $end
$var wire 1 U" predict_enable $end
$var wire 1 - reset $end
$var wire 4 V" update_index [3:0] $end
$var wire 1 ;" update_enable $end
$var wire 1 m prediction $end
$var wire 2 W" predict_strength [1:0] $end
$var wire 4 X" predict_index [3:0] $end
$var wire 32 Y" pc_update [31:0] $end
$var wire 32 Z" pc_if [31:0] $end
$var wire 1 $" is_branch $end
$var wire 1 :" branch_taken $end
$var integer 32 [" i [31:0] $end
$upscope $end
$scope module branch_control_inst $end
$var wire 1 <" alu_zero $end
$var wire 32 \" rs1_data [31:0] $end
$var wire 32 ]" rs1_signed [31:0] $end
$var wire 32 ^" rs2_data [31:0] $end
$var wire 32 _" rs2_signed [31:0] $end
$var wire 7 `" opcode [6:0] $end
$var wire 3 a" funct3 [2:0] $end
$var wire 1 ;" branch_enable $end
$var reg 1 :" branch_taken $end
$upscope $end
$scope module btb_inst $end
$var wire 1 , clk $end
$var wire 1 b" hit $end
$var wire 1 8" hit_valid $end
$var wire 1 c" is_branch_or_jump $end
$var wire 1 d" lookup_enable $end
$var wire 1 - reset $end
$var wire 32 e" target_update [31:0] $end
$var wire 1 f" update_enable $end
$var wire 23 g" update_tag [22:0] $end
$var wire 4 h" update_index [3:0] $end
$var wire 32 i" target_predict [31:0] $end
$var wire 32 j" pc_update [31:0] $end
$var wire 32 k" pc_if [31:0] $end
$var wire 32 l" pc_hit [31:0] $end
$var wire 23 m" lookup_tag [22:0] $end
$var wire 4 n" lookup_index [3:0] $end
$var integer 32 o" i [31:0] $end
$upscope $end
$scope module data_memory_inst $end
$var wire 32 p" aligned_addr [31:0] $end
$var wire 1 , clk $end
$var wire 2 q" load_type [1:0] $end
$var wire 1 - reset $end
$var wire 4 r" wr_en [3:0] $end
$var wire 32 s" word_data [31:0] $end
$var wire 2 t" byte_offset [1:0] $end
$var wire 32 u" address [31:0] $end
$var wire 32 v" WriteData [31:0] $end
$var wire 1 J" MemRead $end
$var reg 32 w" ReadData [31:0] $end
$var integer 32 x" i [31:0] $end
$upscope $end
$scope module ex_mem_reg_inst $end
$var wire 32 y" alu_result_in [31:0] $end
$var wire 1 :" branch_taken_in $end
$var wire 32 z" branch_target_in [31:0] $end
$var wire 1 , clk $end
$var wire 1 P flush $end
$var wire 1 - reset $end
$var wire 32 {" rs2_data_in [31:0] $end
$var wire 1 |" stall $end
$var wire 5 }" rd_addr_in [4:0] $end
$var wire 3 ~" funct3_in [2:0] $end
$var wire 1 ;" branch_in $end
$var wire 1 D" RegWrite_in $end
$var wire 1 F" MemWrite_in $end
$var wire 1 I" MemToReg_in $end
$var wire 1 K" MemRead_in $end
$var reg 1 J" MemRead_out $end
$var reg 1 H" MemToReg_out $end
$var reg 1 E" MemWrite_out $end
$var reg 1 C" RegWrite_out $end
$var reg 32 !# alu_result_out [31:0] $end
$var reg 1 "# branch_out $end
$var reg 1 ## branch_taken_out $end
$var reg 32 $# branch_target_out [31:0] $end
$var reg 3 %# funct3_out [2:0] $end
$var reg 5 &# rd_addr_out [4:0] $end
$var reg 32 '# rs2_data_out [31:0] $end
$upscope $end
$scope module forwarding_unit_inst $end
$var wire 1 C" RegWrite_mem $end
$var wire 5 (# rd_mem [4:0] $end
$var wire 5 )# rs2_ex [4:0] $end
$var wire 5 *# rs1_ex [4:0] $end
$var wire 5 +# rd_wb [4:0] $end
$var wire 1 B" RegWrite_wb $end
$var reg 2 ,# forward_a [1:0] $end
$var reg 2 -# forward_b [1:0] $end
$upscope $end
$scope module hazard_unit_inst $end
$var wire 1 .# control_hazard $end
$var wire 1 P flush_ex $end
$var wire 1 /# hazard_rs1 $end
$var wire 1 0# hazard_rs2 $end
$var wire 1 1# jump_in $end
$var wire 1 2# load_use_hazard $end
$var wire 5 3# rs1_id_in [4:0] $end
$var wire 5 4# rs2_id_in [4:0] $end
$var wire 1 ~ stall $end
$var wire 5 5# rd_ex_in [4:0] $end
$var wire 1 ;" branch_in $end
$var wire 1 K" MemRead_in $end
$upscope $end
$scope module icache_inst $end
$var wire 1 , clk $end
$var wire 1 6# fetch_en $end
$var wire 32 7# instruction [31:0] $end
$var wire 32 8# mem_data [31:0] $end
$var wire 1 U mem_ready $end
$var wire 1 - reset $end
$var wire 1 9# tag_match $end
$var wire 2 :# word_offset [1:0] $end
$var wire 23 ;# tag_in [22:0] $end
$var wire 32 <# pc [31:0] $end
$var wire 5 =# index [4:0] $end
$var parameter 2 ># IDLE $end
$var parameter 2 ?# REFILL $end
$var reg 1 /" hit $end
$var reg 32 @# mem_addr [31:0] $end
$var reg 1 -" mem_read $end
$var reg 1 ," miss $end
$var reg 1 +" ready $end
$var reg 2 A# refill_count [1:0] $end
$var reg 2 B# state [1:0] $end
$var integer 32 C# i [31:0] $end
$upscope $end
$scope module id_ex_reg_inst $end
$var wire 1 D ALUSrc_in $end
$var wire 4 D# ALU_op_in [3:0] $end
$var wire 1 E# MemRead_in $end
$var wire 1 F# MemToReg_in $end
$var wire 1 G# MemWrite_in $end
$var wire 1 H# RegWrite_in $end
$var wire 1 I# branch_in $end
$var wire 1 , clk $end
$var wire 1 Q flush $end
$var wire 3 J# funct3_in [2:0] $end
$var wire 1 '" instr_30_in $end
$var wire 1 7 is_branch_in $end
$var wire 1 6 is_jal_in $end
$var wire 1 5 is_jalr_in $end
$var wire 7 K# opcode_in [6:0] $end
$var wire 5 L# rd_addr_in [4:0] $end
$var wire 1 - reset $end
$var wire 5 M# rs1_addr_in [4:0] $end
$var wire 5 N# rs2_addr_in [4:0] $end
$var wire 1 O# stall $end
$var wire 32 P# rs2_data_in [31:0] $end
$var wire 32 Q# rs1_data_in [31:0] $end
$var wire 1 n prediction_in $end
$var wire 32 R# predicted_target_in [31:0] $end
$var wire 32 S# pc_in [31:0] $end
$var wire 32 T# immediate_in [31:0] $end
$var reg 1 M" ALUSrc_out $end
$var reg 4 U# ALU_op_out [3:0] $end
$var reg 1 K" MemRead_out $end
$var reg 1 I" MemToReg_out $end
$var reg 1 F" MemWrite_out $end
$var reg 1 D" RegWrite_out $end
$var reg 1 ;" branch_out $end
$var reg 3 V# funct3_out [2:0] $end
$var reg 32 W# immediate_out [31:0] $end
$var reg 1 (" instr_30_out $end
$var reg 1 $" is_branch_out $end
$var reg 1 #" is_jal_out $end
$var reg 1 "" is_jalr_out $end
$var reg 7 X# opcode_out [6:0] $end
$var reg 32 Y# pc_out [31:0] $end
$var reg 32 Z# predicted_target_out [31:0] $end
$var reg 1 o prediction_out $end
$var reg 5 [# rd_addr_out [4:0] $end
$var reg 5 \# rs1_addr_out [4:0] $end
$var reg 32 ]# rs1_data_out [31:0] $end
$var reg 5 ^# rs2_addr_out [4:0] $end
$var reg 32 _# rs2_data_out [31:0] $end
$upscope $end
$scope module if_id_reg_inst $end
$var wire 1 , clk $end
$var wire 1 R flush $end
$var wire 32 `# instruction_in [31:0] $end
$var wire 32 a# predicted_target_in [31:0] $end
$var wire 1 m prediction_in $end
$var wire 1 - reset $end
$var wire 1 Y stall $end
$var wire 32 b# pc_in [31:0] $end
$var reg 32 c# instruction_out [31:0] $end
$var reg 32 d# pc_out [31:0] $end
$var reg 32 e# predicted_target_out [31:0] $end
$var reg 1 n prediction_out $end
$upscope $end
$scope module imm_gen_inst $end
$var wire 32 f# instruction [31:0] $end
$var wire 32 g# u_imm [31:0] $end
$var wire 32 h# s_imm [31:0] $end
$var wire 7 i# opcode [6:0] $end
$var wire 32 j# j_imm [31:0] $end
$var wire 32 k# i_imm [31:0] $end
$var wire 32 l# b_imm [31:0] $end
$var reg 32 m# immediate [31:0] $end
$upscope $end
$scope module mem_wb_reg_inst $end
$var wire 1 H" MemToReg_in $end
$var wire 1 C" RegWrite_in $end
$var wire 32 n# alu_result_in [31:0] $end
$var wire 1 , clk $end
$var wire 1 o# flush $end
$var wire 32 p# mem_data_in [31:0] $end
$var wire 5 q# rd_addr_in [4:0] $end
$var wire 1 - reset $end
$var wire 1 r# stall $end
$var reg 1 G" MemToReg_out $end
$var reg 1 B" RegWrite_out $end
$var reg 32 s# alu_result_out [31:0] $end
$var reg 32 t# mem_data_out [31:0] $end
$var reg 5 u# rd_addr_out [4:0] $end
$upscope $end
$scope module pc_inst $end
$var wire 1 , clk $end
$var wire 32 v# pc_next [31:0] $end
$var wire 1 - reset $end
$var reg 32 w# pc [31:0] $end
$upscope $end
$scope module pc_plus4_inst $end
$var wire 32 x# pc_in [31:0] $end
$var wire 32 y# pc_plus4 [31:0] $end
$upscope $end
$scope module ras_inst $end
$var wire 1 , clk $end
$var wire 1 O flush $end
$var wire 1 z# is_call $end
$var wire 1 {# is_return $end
$var wire 7 |# opcode [6:0] $end
$var wire 1 "" pop_en $end
$var wire 1 }# push_en $end
$var wire 5 ~# rd [4:0] $end
$var wire 1 - reset $end
$var wire 32 !$ return_addresss [31:0] $end
$var wire 5 "$ rs1 [4:0] $end
$var wire 3 #$ stack_ptr_out [2:0] $end
$var wire 32 $$ top_stack_address [31:0] $end
$var wire 1 j valid_ras $end
$var reg 3 %$ stack_ptr [2:0] $end
$var integer 32 &$ i [31:0] $end
$upscope $end
$scope module register_inst $end
$var wire 1 , clk $end
$var wire 5 '$ rd [4:0] $end
$var wire 1 - reset $end
$var wire 5 ($ rs1_addr [4:0] $end
$var wire 5 )$ rs2_addr [4:0] $end
$var wire 1 B" wr_en $end
$var wire 32 *$ write_data [31:0] $end
$var wire 32 +$ rs2_data [31:0] $end
$var wire 32 ,$ rs1_data [31:0] $end
$var integer 32 -$ i [31:0] $end
$upscope $end
$upscope $end
$scope module performance_counters_inst $end
$var wire 1 .$ branch_predict $end
$var wire 1 * branch_taken $end
$var wire 1 , clk $end
$var wire 1 /$ instruction_valid $end
$var wire 1 7 is_branch $end
$var wire 1 - reset $end
$var wire 1 ' stall $end
$var reg 32 0$ branch_count [31:0] $end
$var reg 32 1$ branch_mispredicts [31:0] $end
$var reg 32 2$ cycle_count [31:0] $end
$var reg 32 3$ instruction_count [31:0] $end
$var reg 32 4$ stall_count [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1 ?#
b0 >#
$end
#0
$dumpvars
b0 4$
b0 3$
b0 2$
b0 1$
b0 0$
0/$
0.$
b100000 -$
b0 ,$
b0 +$
b0 *$
b0 )$
b0 ($
b0 '$
b1000 &$
b0 %$
b0 $$
b0 #$
b0 "$
b100 !$
b0 ~#
0}#
b0 |#
0{#
0z#
b100 y#
b0 x#
b0 w#
b100 v#
b0 u#
b0 t#
b0 s#
0r#
b0 q#
b0 p#
0o#
b0 n#
b0 m#
b0 l#
b0 k#
b0 j#
b10011 i#
b0 h#
b0 g#
b10011 f#
b0 e#
b0 d#
b10011 c#
b0 b#
b100 a#
bx `#
b0 _#
b0 ^#
b0 ]#
b0 \#
b0 [#
b0 Z#
b0 Y#
b0 X#
b0 W#
b0 V#
b0 U#
b0 T#
b0 S#
b0 R#
b0 Q#
b0 P#
0O#
b0 N#
b0 M#
b0 L#
b10011 K#
b0 J#
0I#
1H#
0G#
0F#
0E#
b0 D#
b100000 C#
b0 B#
b0 A#
b0 @#
b0 =#
b0 <#
b0 ;#
b0 :#
09#
b10011 8#
bx 7#
16#
b0 5#
b0 4#
b0 3#
02#
01#
00#
0/#
0.#
b0 -#
b0 ,#
b0 +#
b0 *#
b0 )#
b0 (#
b0 '#
b0 &#
b0 %#
b0 $#
0##
0"#
b0 !#
b0 ~"
b0 }"
0|"
b0 {"
b0 z"
b0 y"
b10000000000 x"
b0 w"
b0 v"
b0 u"
b0 t"
b0 s"
b0 r"
b0 q"
b0 p"
b10000 o"
b0 n"
b0 m"
b0 l"
b0 k"
b0 j"
b100 i"
b0 h"
b0 g"
0f"
b100 e"
1d"
0c"
0b"
b0 a"
b0 `"
b0 _"
b0 ^"
b0 ]"
b0 \"
b10000 ["
b0 Z"
b0 Y"
b0 X"
b10 W"
b0 V"
1U"
b0 T"
b0 S"
b0 R"
b0 Q"
b0 P"
b0 O"
b0 N"
0M"
b0 L"
0K"
0J"
0I"
0H"
0G"
0F"
0E"
0D"
0C"
0B"
b100 A"
b0 @"
b0 ?"
b0 >"
b0 ="
1<"
0;"
0:"
b0 9"
08"
b100 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
0/"
b0 ."
0-"
1,"
0+"
b0 *"
b0 )"
0("
0'"
b10011 &"
bx %"
0$"
0#"
0""
b0 !"
0~
b0 }
b0 |
b0 {
b10011 z
b0 y
b0 x
b0 w
b0 v
b100 u
b100 t
b10 s
b100 r
b0 q
b0 p
0o
0n
1m
b0 l
b0 k
0j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
b0 \
b0 [
0Z
0Y
b0 X
b0 W
b10011 V
0U
bx T
b10011 S
0R
0Q
0P
0O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b10011 F
b10011 E
1D
b0 C
0B
0A
0@
1?
0>
b0 =
b0 <
b0 ;
b0 :
b10011 9
bx 8
07
06
05
04
03
02
b0 1
b0 0
b0 /
b10011 .
1-
0,
b0 +
0*
b0 )
b0 (
0'
b0 &
b10011 %
bx $
b0 #
b0 "
b0 !
$end
#5000
b10000000000 x"
b100000 -$
b100000 C#
b1000 &$
b10000 ["
b10000 o"
1,
#10000
0,
#15000
b10000 o"
b10000 ["
b1000 &$
b100000 C#
b100000 -$
b10000000000 x"
1,
#20000
b0 v#
b0 s
b0 W"
0m
0,"
0H#
0d"
0U"
06#
1Y
1'
0,
0-
#25000
b1 !
b1 /
b1 4$
b1 (
b1 ;
b1 2$
b10011 {
b10011 `"
b10011 X#
b10011 |#
1M"
1,
#30000
0,
#35000
b10 !
b10 /
b10 4$
b10 (
b10 ;
b10 2$
1,
#40000
0,
#45000
b11 !
b11 /
b11 4$
b11 (
b11 ;
b11 2$
1,
#50000
0,
#55000
b100 !
b100 /
b100 4$
b100 (
b100 ;
b100 2$
1,
#60000
0,
#65000
b101 !
b101 /
b101 4$
b101 (
b101 ;
b101 2$
1,
#70000
0,
#75000
b110 !
b110 /
b110 4$
b110 (
b110 ;
b110 2$
1,
#80000
0,
#85000
b111 !
b111 /
b111 4$
b111 (
b111 ;
b111 2$
1,
#90000
0,
#95000
b1000 !
b1000 /
b1000 4$
b1000 (
b1000 ;
b1000 2$
1,
#100000
0,
#105000
b1001 !
b1001 /
b1001 4$
b1001 (
b1001 ;
b1001 2$
1,
#110000
0,
#115000
b1010 !
b1010 /
b1010 4$
b1010 (
b1010 ;
b1010 2$
1,
#120000
0,
#125000
b1011 !
b1011 /
b1011 4$
b1011 (
b1011 ;
b1011 2$
1,
#130000
0,
#135000
b1100 !
b1100 /
b1100 4$
b1100 (
b1100 ;
b1100 2$
1,
#140000
0,
#145000
b1101 !
b1101 /
b1101 4$
b1101 (
b1101 ;
b1101 2$
1,
#150000
0,
#155000
b1110 !
b1110 /
b1110 4$
b1110 (
b1110 ;
b1110 2$
1,
#160000
0,
#165000
b1111 !
b1111 /
b1111 4$
b1111 (
b1111 ;
b1111 2$
1,
#170000
0,
#175000
b10000 !
b10000 /
b10000 4$
b10000 (
b10000 ;
b10000 2$
1,
#180000
0,
#185000
b10001 !
b10001 /
b10001 4$
b10001 (
b10001 ;
b10001 2$
1,
#190000
0,
#195000
b10010 !
b10010 /
b10010 4$
b10010 (
b10010 ;
b10010 2$
1,
#200000
0,
#205000
b10011 !
b10011 /
b10011 4$
b10011 (
b10011 ;
b10011 2$
1,
#210000
0,
#215000
b10100 !
b10100 /
b10100 4$
b10100 (
b10100 ;
b10100 2$
1,
#220000
0,
#225000
b10101 !
b10101 /
b10101 4$
b10101 (
b10101 ;
b10101 2$
1,
#230000
0,
#235000
b10110 !
b10110 /
b10110 4$
b10110 (
b10110 ;
b10110 2$
1,
#240000
0,
#245000
b10111 !
b10111 /
b10111 4$
b10111 (
b10111 ;
b10111 2$
1,
#250000
0,
#255000
b11000 !
b11000 /
b11000 4$
b11000 (
b11000 ;
b11000 2$
1,
#260000
0,
#265000
b11001 !
b11001 /
b11001 4$
b11001 (
b11001 ;
b11001 2$
1,
#270000
0,
#275000
b11010 !
b11010 /
b11010 4$
b11010 (
b11010 ;
b11010 2$
1,
#280000
0,
#285000
b11011 !
b11011 /
b11011 4$
b11011 (
b11011 ;
b11011 2$
1,
#290000
0,
#295000
b11100 !
b11100 /
b11100 4$
b11100 (
b11100 ;
b11100 2$
1,
#300000
0,
#305000
b11101 !
b11101 /
b11101 4$
b11101 (
b11101 ;
b11101 2$
1,
#310000
0,
#315000
b11110 !
b11110 /
b11110 4$
b11110 (
b11110 ;
b11110 2$
1,
#320000
0,
#325000
b11111 !
b11111 /
b11111 4$
b11111 (
b11111 ;
b11111 2$
1,
#330000
0,
#335000
b100000 !
b100000 /
b100000 4$
b100000 (
b100000 ;
b100000 2$
1,
#340000
0,
#345000
b100001 !
b100001 /
b100001 4$
b100001 (
b100001 ;
b100001 2$
1,
#350000
0,
#355000
b100010 !
b100010 /
b100010 4$
b100010 (
b100010 ;
b100010 2$
1,
#360000
0,
#365000
b100011 !
b100011 /
b100011 4$
b100011 (
b100011 ;
b100011 2$
1,
#370000
0,
#375000
b100100 !
b100100 /
b100100 4$
b100100 (
b100100 ;
b100100 2$
1,
#380000
0,
#385000
b100101 !
b100101 /
b100101 4$
b100101 (
b100101 ;
b100101 2$
1,
#390000
0,
#395000
b100110 !
b100110 /
b100110 4$
b100110 (
b100110 ;
b100110 2$
1,
#400000
0,
#405000
b100111 !
b100111 /
b100111 4$
b100111 (
b100111 ;
b100111 2$
1,
#410000
0,
#415000
b101000 !
b101000 /
b101000 4$
b101000 (
b101000 ;
b101000 2$
1,
#420000
0,
#425000
b101001 !
b101001 /
b101001 4$
b101001 (
b101001 ;
b101001 2$
1,
#430000
0,
#435000
b101010 !
b101010 /
b101010 4$
b101010 (
b101010 ;
b101010 2$
1,
#440000
0,
#445000
b101011 !
b101011 /
b101011 4$
b101011 (
b101011 ;
b101011 2$
1,
#450000
0,
#455000
b101100 !
b101100 /
b101100 4$
b101100 (
b101100 ;
b101100 2$
1,
#460000
0,
#465000
b101101 !
b101101 /
b101101 4$
b101101 (
b101101 ;
b101101 2$
1,
#470000
0,
#475000
b101110 !
b101110 /
b101110 4$
b101110 (
b101110 ;
b101110 2$
1,
#480000
0,
#485000
b101111 !
b101111 /
b101111 4$
b101111 (
b101111 ;
b101111 2$
1,
#490000
0,
#495000
b110000 !
b110000 /
b110000 4$
b110000 (
b110000 ;
b110000 2$
1,
#500000
0,
#505000
b110001 !
b110001 /
b110001 4$
b110001 (
b110001 ;
b110001 2$
1,
#510000
0,
#515000
b110010 !
b110010 /
b110010 4$
b110010 (
b110010 ;
b110010 2$
1,
#520000
0,
#525000
b110011 !
b110011 /
b110011 4$
b110011 (
b110011 ;
b110011 2$
1,
#530000
0,
#535000
b110100 !
b110100 /
b110100 4$
b110100 (
b110100 ;
b110100 2$
1,
#540000
0,
#545000
b110101 !
b110101 /
b110101 4$
b110101 (
b110101 ;
b110101 2$
1,
#550000
0,
#555000
b110110 !
b110110 /
b110110 4$
b110110 (
b110110 ;
b110110 2$
1,
#560000
0,
#565000
b110111 !
b110111 /
b110111 4$
b110111 (
b110111 ;
b110111 2$
1,
#570000
0,
#575000
b111000 !
b111000 /
b111000 4$
b111000 (
b111000 ;
b111000 2$
1,
#580000
0,
#585000
b111001 !
b111001 /
b111001 4$
b111001 (
b111001 ;
b111001 2$
1,
#590000
0,
#595000
b111010 !
b111010 /
b111010 4$
b111010 (
b111010 ;
b111010 2$
1,
#600000
0,
#605000
b111011 !
b111011 /
b111011 4$
b111011 (
b111011 ;
b111011 2$
1,
#610000
0,
#615000
b111100 !
b111100 /
b111100 4$
b111100 (
b111100 ;
b111100 2$
1,
#620000
0,
#625000
b111101 !
b111101 /
b111101 4$
b111101 (
b111101 ;
b111101 2$
1,
#630000
0,
#635000
b111110 !
b111110 /
b111110 4$
b111110 (
b111110 ;
b111110 2$
1,
#640000
0,
#645000
b111111 !
b111111 /
b111111 4$
b111111 (
b111111 ;
b111111 2$
1,
#650000
0,
#655000
b1000000 !
b1000000 /
b1000000 4$
b1000000 (
b1000000 ;
b1000000 2$
1,
#660000
0,
#665000
b1000001 !
b1000001 /
b1000001 4$
b1000001 (
b1000001 ;
b1000001 2$
1,
#670000
0,
#675000
b1000010 !
b1000010 /
b1000010 4$
b1000010 (
b1000010 ;
b1000010 2$
1,
#680000
0,
#685000
b1000011 !
b1000011 /
b1000011 4$
b1000011 (
b1000011 ;
b1000011 2$
1,
#690000
0,
#695000
b1000100 !
b1000100 /
b1000100 4$
b1000100 (
b1000100 ;
b1000100 2$
1,
#700000
0,
#705000
b1000101 !
b1000101 /
b1000101 4$
b1000101 (
b1000101 ;
b1000101 2$
1,
#710000
0,
#715000
b1000110 !
b1000110 /
b1000110 4$
b1000110 (
b1000110 ;
b1000110 2$
1,
#720000
0,
#725000
b1000111 !
b1000111 /
b1000111 4$
b1000111 (
b1000111 ;
b1000111 2$
1,
#730000
0,
#735000
b1001000 !
b1001000 /
b1001000 4$
b1001000 (
b1001000 ;
b1001000 2$
1,
#740000
0,
#745000
b1001001 !
b1001001 /
b1001001 4$
b1001001 (
b1001001 ;
b1001001 2$
1,
#750000
0,
#755000
b1001010 !
b1001010 /
b1001010 4$
b1001010 (
b1001010 ;
b1001010 2$
1,
#760000
0,
#765000
b1001011 !
b1001011 /
b1001011 4$
b1001011 (
b1001011 ;
b1001011 2$
1,
#770000
0,
#775000
b1001100 !
b1001100 /
b1001100 4$
b1001100 (
b1001100 ;
b1001100 2$
1,
#780000
0,
#785000
b1001101 !
b1001101 /
b1001101 4$
b1001101 (
b1001101 ;
b1001101 2$
1,
#790000
0,
#795000
b1001110 !
b1001110 /
b1001110 4$
b1001110 (
b1001110 ;
b1001110 2$
1,
#800000
0,
#805000
b1001111 !
b1001111 /
b1001111 4$
b1001111 (
b1001111 ;
b1001111 2$
1,
#810000
0,
#815000
b1010000 !
b1010000 /
b1010000 4$
b1010000 (
b1010000 ;
b1010000 2$
1,
#820000
0,
#825000
b1010001 !
b1010001 /
b1010001 4$
b1010001 (
b1010001 ;
b1010001 2$
1,
#830000
0,
#835000
b1010010 !
b1010010 /
b1010010 4$
b1010010 (
b1010010 ;
b1010010 2$
1,
#840000
0,
#845000
b1010011 !
b1010011 /
b1010011 4$
b1010011 (
b1010011 ;
b1010011 2$
1,
#850000
0,
#855000
b1010100 !
b1010100 /
b1010100 4$
b1010100 (
b1010100 ;
b1010100 2$
1,
#860000
0,
#865000
b1010101 !
b1010101 /
b1010101 4$
b1010101 (
b1010101 ;
b1010101 2$
1,
#870000
0,
#875000
b1010110 !
b1010110 /
b1010110 4$
b1010110 (
b1010110 ;
b1010110 2$
1,
#880000
0,
#885000
b1010111 !
b1010111 /
b1010111 4$
b1010111 (
b1010111 ;
b1010111 2$
1,
#890000
0,
#895000
b1011000 !
b1011000 /
b1011000 4$
b1011000 (
b1011000 ;
b1011000 2$
1,
#900000
0,
#905000
b1011001 !
b1011001 /
b1011001 4$
b1011001 (
b1011001 ;
b1011001 2$
1,
#910000
0,
#915000
b1011010 !
b1011010 /
b1011010 4$
b1011010 (
b1011010 ;
b1011010 2$
1,
#920000
0,
#925000
b1011011 !
b1011011 /
b1011011 4$
b1011011 (
b1011011 ;
b1011011 2$
1,
#930000
0,
#935000
b1011100 !
b1011100 /
b1011100 4$
b1011100 (
b1011100 ;
b1011100 2$
1,
#940000
0,
#945000
b1011101 !
b1011101 /
b1011101 4$
b1011101 (
b1011101 ;
b1011101 2$
1,
#950000
0,
#955000
b1011110 !
b1011110 /
b1011110 4$
b1011110 (
b1011110 ;
b1011110 2$
1,
#960000
0,
#965000
b1011111 !
b1011111 /
b1011111 4$
b1011111 (
b1011111 ;
b1011111 2$
1,
#970000
0,
#975000
b1100000 !
b1100000 /
b1100000 4$
b1100000 (
b1100000 ;
b1100000 2$
1,
#980000
0,
#985000
b1100001 !
b1100001 /
b1100001 4$
b1100001 (
b1100001 ;
b1100001 2$
1,
#990000
0,
#995000
b1100010 !
b1100010 /
b1100010 4$
b1100010 (
b1100010 ;
b1100010 2$
1,
#1000000
0,
#1005000
b1100011 !
b1100011 /
b1100011 4$
b1100011 (
b1100011 ;
b1100011 2$
1,
#1010000
0,
#1015000
b1100100 !
b1100100 /
b1100100 4$
b1100100 (
b1100100 ;
b1100100 2$
1,
#1020000
0,
#1025000
b1100101 !
b1100101 /
b1100101 4$
b1100101 (
b1100101 ;
b1100101 2$
1,
#1030000
0,
#1035000
b1100110 !
b1100110 /
b1100110 4$
b1100110 (
b1100110 ;
b1100110 2$
1,
#1040000
0,
#1045000
b1100111 !
b1100111 /
b1100111 4$
b1100111 (
b1100111 ;
b1100111 2$
1,
#1050000
0,
#1055000
b1101000 !
b1101000 /
b1101000 4$
b1101000 (
b1101000 ;
b1101000 2$
1,
#1060000
0,
#1065000
b1101001 !
b1101001 /
b1101001 4$
b1101001 (
b1101001 ;
b1101001 2$
1,
#1070000
0,
#1075000
b1101010 !
b1101010 /
b1101010 4$
b1101010 (
b1101010 ;
b1101010 2$
1,
#1080000
0,
#1085000
b1101011 !
b1101011 /
b1101011 4$
b1101011 (
b1101011 ;
b1101011 2$
1,
#1090000
0,
#1095000
b1101100 !
b1101100 /
b1101100 4$
b1101100 (
b1101100 ;
b1101100 2$
1,
#1100000
0,
#1105000
b1101101 !
b1101101 /
b1101101 4$
b1101101 (
b1101101 ;
b1101101 2$
1,
#1110000
0,
#1115000
b1101110 !
b1101110 /
b1101110 4$
b1101110 (
b1101110 ;
b1101110 2$
1,
#1120000
0,
#1125000
b1101111 !
b1101111 /
b1101111 4$
b1101111 (
b1101111 ;
b1101111 2$
1,
#1130000
0,
#1135000
b1110000 !
b1110000 /
b1110000 4$
b1110000 (
b1110000 ;
b1110000 2$
1,
#1140000
0,
#1145000
b1110001 !
b1110001 /
b1110001 4$
b1110001 (
b1110001 ;
b1110001 2$
1,
#1150000
0,
#1155000
b1110010 !
b1110010 /
b1110010 4$
b1110010 (
b1110010 ;
b1110010 2$
1,
#1160000
0,
#1165000
b1110011 !
b1110011 /
b1110011 4$
b1110011 (
b1110011 ;
b1110011 2$
1,
#1170000
0,
#1175000
b1110100 !
b1110100 /
b1110100 4$
b1110100 (
b1110100 ;
b1110100 2$
1,
#1180000
0,
#1185000
b1110101 !
b1110101 /
b1110101 4$
b1110101 (
b1110101 ;
b1110101 2$
1,
#1190000
0,
#1195000
b1110110 !
b1110110 /
b1110110 4$
b1110110 (
b1110110 ;
b1110110 2$
1,
#1200000
0,
#1205000
b1110111 !
b1110111 /
b1110111 4$
b1110111 (
b1110111 ;
b1110111 2$
1,
#1210000
0,
#1215000
b1111000 !
b1111000 /
b1111000 4$
b1111000 (
b1111000 ;
b1111000 2$
1,
#1220000
0,
#1225000
b1111001 !
b1111001 /
b1111001 4$
b1111001 (
b1111001 ;
b1111001 2$
1,
#1230000
0,
#1235000
b1111010 !
b1111010 /
b1111010 4$
b1111010 (
b1111010 ;
b1111010 2$
1,
#1240000
0,
#1245000
b1111011 !
b1111011 /
b1111011 4$
b1111011 (
b1111011 ;
b1111011 2$
1,
#1250000
0,
#1255000
b1111100 !
b1111100 /
b1111100 4$
b1111100 (
b1111100 ;
b1111100 2$
1,
#1260000
0,
#1265000
b1111101 !
b1111101 /
b1111101 4$
b1111101 (
b1111101 ;
b1111101 2$
1,
#1270000
0,
#1275000
b1111110 !
b1111110 /
b1111110 4$
b1111110 (
b1111110 ;
b1111110 2$
1,
#1280000
0,
#1285000
b1111111 !
b1111111 /
b1111111 4$
b1111111 (
b1111111 ;
b1111111 2$
1,
#1290000
0,
#1295000
b10000000 !
b10000000 /
b10000000 4$
b10000000 (
b10000000 ;
b10000000 2$
1,
#1300000
0,
#1305000
b10000001 !
b10000001 /
b10000001 4$
b10000001 (
b10000001 ;
b10000001 2$
1,
#1310000
0,
#1315000
b10000010 !
b10000010 /
b10000010 4$
b10000010 (
b10000010 ;
b10000010 2$
1,
#1320000
0,
#1325000
b10000011 !
b10000011 /
b10000011 4$
b10000011 (
b10000011 ;
b10000011 2$
1,
#1330000
0,
#1335000
b10000100 !
b10000100 /
b10000100 4$
b10000100 (
b10000100 ;
b10000100 2$
1,
#1340000
0,
#1345000
b10000101 !
b10000101 /
b10000101 4$
b10000101 (
b10000101 ;
b10000101 2$
1,
#1350000
0,
#1355000
b10000110 !
b10000110 /
b10000110 4$
b10000110 (
b10000110 ;
b10000110 2$
1,
#1360000
0,
#1365000
b10000111 !
b10000111 /
b10000111 4$
b10000111 (
b10000111 ;
b10000111 2$
1,
#1370000
0,
#1375000
b10001000 !
b10001000 /
b10001000 4$
b10001000 (
b10001000 ;
b10001000 2$
1,
#1380000
0,
#1385000
b10001001 !
b10001001 /
b10001001 4$
b10001001 (
b10001001 ;
b10001001 2$
1,
#1390000
0,
#1395000
b10001010 !
b10001010 /
b10001010 4$
b10001010 (
b10001010 ;
b10001010 2$
1,
#1400000
0,
#1405000
b10001011 !
b10001011 /
b10001011 4$
b10001011 (
b10001011 ;
b10001011 2$
1,
#1410000
0,
#1415000
b10001100 !
b10001100 /
b10001100 4$
b10001100 (
b10001100 ;
b10001100 2$
1,
#1420000
0,
#1425000
b10001101 !
b10001101 /
b10001101 4$
b10001101 (
b10001101 ;
b10001101 2$
1,
#1430000
0,
#1435000
b10001110 !
b10001110 /
b10001110 4$
b10001110 (
b10001110 ;
b10001110 2$
1,
#1440000
0,
#1445000
b10001111 !
b10001111 /
b10001111 4$
b10001111 (
b10001111 ;
b10001111 2$
1,
#1450000
0,
#1455000
b10010000 !
b10010000 /
b10010000 4$
b10010000 (
b10010000 ;
b10010000 2$
1,
#1460000
0,
#1465000
b10010001 !
b10010001 /
b10010001 4$
b10010001 (
b10010001 ;
b10010001 2$
1,
#1470000
0,
#1475000
b10010010 !
b10010010 /
b10010010 4$
b10010010 (
b10010010 ;
b10010010 2$
1,
#1480000
0,
#1485000
b10010011 !
b10010011 /
b10010011 4$
b10010011 (
b10010011 ;
b10010011 2$
1,
#1490000
0,
#1495000
b10010100 !
b10010100 /
b10010100 4$
b10010100 (
b10010100 ;
b10010100 2$
1,
#1500000
0,
#1505000
b10010101 !
b10010101 /
b10010101 4$
b10010101 (
b10010101 ;
b10010101 2$
1,
#1510000
0,
#1515000
b10010110 !
b10010110 /
b10010110 4$
b10010110 (
b10010110 ;
b10010110 2$
1,
#1520000
0,
#1525000
b10010111 !
b10010111 /
b10010111 4$
b10010111 (
b10010111 ;
b10010111 2$
1,
#1530000
0,
#1535000
b10011000 !
b10011000 /
b10011000 4$
b10011000 (
b10011000 ;
b10011000 2$
1,
#1540000
0,
#1545000
b10011001 !
b10011001 /
b10011001 4$
b10011001 (
b10011001 ;
b10011001 2$
1,
#1550000
0,
#1555000
b10011010 !
b10011010 /
b10011010 4$
b10011010 (
b10011010 ;
b10011010 2$
1,
#1560000
0,
#1565000
b10011011 !
b10011011 /
b10011011 4$
b10011011 (
b10011011 ;
b10011011 2$
1,
#1570000
0,
#1575000
b10011100 !
b10011100 /
b10011100 4$
b10011100 (
b10011100 ;
b10011100 2$
1,
#1580000
0,
#1585000
b10011101 !
b10011101 /
b10011101 4$
b10011101 (
b10011101 ;
b10011101 2$
1,
#1590000
0,
#1595000
b10011110 !
b10011110 /
b10011110 4$
b10011110 (
b10011110 ;
b10011110 2$
1,
#1600000
0,
#1605000
b10011111 !
b10011111 /
b10011111 4$
b10011111 (
b10011111 ;
b10011111 2$
1,
#1610000
0,
#1615000
b10100000 !
b10100000 /
b10100000 4$
b10100000 (
b10100000 ;
b10100000 2$
1,
#1620000
0,
#1625000
b10100001 !
b10100001 /
b10100001 4$
b10100001 (
b10100001 ;
b10100001 2$
1,
#1630000
0,
#1635000
b10100010 !
b10100010 /
b10100010 4$
b10100010 (
b10100010 ;
b10100010 2$
1,
#1640000
0,
#1645000
b10100011 !
b10100011 /
b10100011 4$
b10100011 (
b10100011 ;
b10100011 2$
1,
#1650000
0,
#1655000
b10100100 !
b10100100 /
b10100100 4$
b10100100 (
b10100100 ;
b10100100 2$
1,
#1660000
0,
#1665000
b10100101 !
b10100101 /
b10100101 4$
b10100101 (
b10100101 ;
b10100101 2$
1,
#1670000
0,
#1675000
b10100110 !
b10100110 /
b10100110 4$
b10100110 (
b10100110 ;
b10100110 2$
1,
#1680000
0,
#1685000
b10100111 !
b10100111 /
b10100111 4$
b10100111 (
b10100111 ;
b10100111 2$
1,
#1690000
0,
#1695000
b10101000 !
b10101000 /
b10101000 4$
b10101000 (
b10101000 ;
b10101000 2$
1,
#1700000
0,
#1705000
b10101001 !
b10101001 /
b10101001 4$
b10101001 (
b10101001 ;
b10101001 2$
1,
#1710000
0,
#1715000
b10101010 !
b10101010 /
b10101010 4$
b10101010 (
b10101010 ;
b10101010 2$
1,
#1720000
0,
#1725000
b10101011 !
b10101011 /
b10101011 4$
b10101011 (
b10101011 ;
b10101011 2$
1,
#1730000
0,
#1735000
b10101100 !
b10101100 /
b10101100 4$
b10101100 (
b10101100 ;
b10101100 2$
1,
#1740000
0,
#1745000
b10101101 !
b10101101 /
b10101101 4$
b10101101 (
b10101101 ;
b10101101 2$
1,
#1750000
0,
#1755000
b10101110 !
b10101110 /
b10101110 4$
b10101110 (
b10101110 ;
b10101110 2$
1,
#1760000
0,
#1765000
b10101111 !
b10101111 /
b10101111 4$
b10101111 (
b10101111 ;
b10101111 2$
1,
#1770000
0,
#1775000
b10110000 !
b10110000 /
b10110000 4$
b10110000 (
b10110000 ;
b10110000 2$
1,
#1780000
0,
#1785000
b10110001 !
b10110001 /
b10110001 4$
b10110001 (
b10110001 ;
b10110001 2$
1,
#1790000
0,
#1795000
b10110010 !
b10110010 /
b10110010 4$
b10110010 (
b10110010 ;
b10110010 2$
1,
#1800000
0,
#1805000
b10110011 !
b10110011 /
b10110011 4$
b10110011 (
b10110011 ;
b10110011 2$
1,
#1810000
0,
#1815000
b10110100 !
b10110100 /
b10110100 4$
b10110100 (
b10110100 ;
b10110100 2$
1,
#1820000
0,
#1825000
b10110101 !
b10110101 /
b10110101 4$
b10110101 (
b10110101 ;
b10110101 2$
1,
#1830000
0,
#1835000
b10110110 !
b10110110 /
b10110110 4$
b10110110 (
b10110110 ;
b10110110 2$
1,
#1840000
0,
#1845000
b10110111 !
b10110111 /
b10110111 4$
b10110111 (
b10110111 ;
b10110111 2$
1,
#1850000
0,
#1855000
b10111000 !
b10111000 /
b10111000 4$
b10111000 (
b10111000 ;
b10111000 2$
1,
#1860000
0,
#1865000
b10111001 !
b10111001 /
b10111001 4$
b10111001 (
b10111001 ;
b10111001 2$
1,
#1870000
0,
#1875000
b10111010 !
b10111010 /
b10111010 4$
b10111010 (
b10111010 ;
b10111010 2$
1,
#1880000
0,
#1885000
b10111011 !
b10111011 /
b10111011 4$
b10111011 (
b10111011 ;
b10111011 2$
1,
#1890000
0,
#1895000
b10111100 !
b10111100 /
b10111100 4$
b10111100 (
b10111100 ;
b10111100 2$
1,
#1900000
0,
#1905000
b10111101 !
b10111101 /
b10111101 4$
b10111101 (
b10111101 ;
b10111101 2$
1,
#1910000
0,
#1915000
b10111110 !
b10111110 /
b10111110 4$
b10111110 (
b10111110 ;
b10111110 2$
1,
#1920000
0,
#1925000
b10111111 !
b10111111 /
b10111111 4$
b10111111 (
b10111111 ;
b10111111 2$
1,
#1930000
0,
#1935000
b11000000 !
b11000000 /
b11000000 4$
b11000000 (
b11000000 ;
b11000000 2$
1,
#1940000
0,
#1945000
b11000001 !
b11000001 /
b11000001 4$
b11000001 (
b11000001 ;
b11000001 2$
1,
#1950000
0,
#1955000
b11000010 !
b11000010 /
b11000010 4$
b11000010 (
b11000010 ;
b11000010 2$
1,
#1960000
0,
#1965000
b11000011 !
b11000011 /
b11000011 4$
b11000011 (
b11000011 ;
b11000011 2$
1,
#1970000
0,
#1975000
b11000100 !
b11000100 /
b11000100 4$
b11000100 (
b11000100 ;
b11000100 2$
1,
#1980000
0,
#1985000
b11000101 !
b11000101 /
b11000101 4$
b11000101 (
b11000101 ;
b11000101 2$
1,
#1990000
0,
#1995000
b11000110 !
b11000110 /
b11000110 4$
b11000110 (
b11000110 ;
b11000110 2$
1,
#2000000
0,
#2005000
b11000111 !
b11000111 /
b11000111 4$
b11000111 (
b11000111 ;
b11000111 2$
1,
#2010000
0,
#2015000
b11001000 !
b11001000 /
b11001000 4$
b11001000 (
b11001000 ;
b11001000 2$
1,
#2016000

// Matrix Multiply 2x2 using RV32IM
// A = [[2,3], [4,5]]  B = [[5,6], [7,8]]
// Expected C = [[31,36], [55,64]]

// Load immediate values into registers (A matrix)
00200413  // addi x8, x0, 2        # A[0][0] = 2
00300493  // addi x9, x0, 3        # A[0][1] = 3
00400513  // addi x10, x0, 4       # A[1][0] = 4
00500593  // addi x11, x0, 5       # A[1][1] = 5

// Load immediate values (B matrix)
00500613  // addi x12, x0, 5       # B[0][0] = 5
00600693  // addi x13, x0, 6       # B[0][1] = 6
00700713  // addi x14, x0, 7       # B[1][0] = 7
00800793  // addi x15, x0, 8       # B[1][1] = 8

// C[0][0] = A[0][0]*B[0][0] + A[0][1]*B[1][0]
// C[0][0] = 2*5 + 3*7 = 10 + 21 = 31
02c40833  // mul x16, x8, x12      # x16 = 2 * 5 = 10
02e488b3  // mul x17, x9, x14      # x17 = 3 * 7 = 21
01110833  // add x16, x16, x17     # x16 = 10 + 21 = 31

// C[0][1] = A[0][0]*B[0][1] + A[0][1]*B[1][1]
// C[0][1] = 2*6 + 3*8 = 12 + 24 = 36
02d40933  // mul x18, x8, x13      # x18 = 2 * 6 = 12
02f489b3  // mul x19, x9, x15      # x19 = 3 * 8 = 24
01390933  // add x18, x18, x19     # x18 = 12 + 24 = 36

// C[1][0] = A[1][0]*B[0][0] + A[1][1]*B[1][0]
// C[1][0] = 4*5 + 5*7 = 20 + 35 = 55
02c50a33  // mul x20, x10, x12     # x20 = 4 * 5 = 20
02e58ab3  // mul x21, x11, x14     # x21 = 5 * 7 = 35
015a0a33  // add x20, x20, x21     # x20 = 20 + 35 = 55

// C[1][1] = A[1][0]*B[0][1] + A[1][1]*B[1][1]
// C[1][1] = 4*6 + 5*8 = 24 + 40 = 64
02d50b33  // mul x22, x10, x13     # x22 = 4 * 6 = 24
02f58bb3  // mul x23, x11, x15     # x23 = 5 * 8 = 40
017b0b33  // add x22, x22, x23     # x22 = 24 + 40 = 64

// Store results to memory (base = 0x120)
12000c13  // addi x24, x0, 0x120   # Result base address
010c2023  // sw x16, 0(x24)        # Store C[0][0] = 31
012c2223  // sw x18, 4(x24)        # Store C[0][1] = 36
014c2423  // sw x20, 8(x24)        # Store C[1][0] = 55
016c2623  // sw x22, 12(x24)       # Store C[1][1] = 64

// Verification: load back and compare
000c2c83  // lw x25, 0(x24)        # Load C[0][0]
004c2d03  // lw x26, 4(x24)        # Load C[0][1]
008c2d83  // lw x27, 8(x24)        # Load C[1][0]
00cc2e03  // lw x28, 12(x24)       # Load C[1][1]

// Done - infinite loop
0000006f  // jal x0, 0             # Infinite loop (stay here)